# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger: none

pool:
  vmImage: ubuntu-latest

steps:
- task: ms-devlabs.custom-terraform-tasks.custom-terraform-installer-task.TerraformInstaller@0
- task: TerraformTaskV4@4
  displayName: Run Terraform Init 
  inputs:
    provider: 'azurerm'
    command: 'init'
    commandOptions: '-reconfigure'
    workingDirectory: '$(System.DefaultWorkingDirectory)/environments/dev' 
    backendServiceArm: 'Pay-As-You-Go (8b41bb3a-73a0-4041-90c2-d82d4d3cbc5f)'
    backendAzureRmResourceGroupName: 'infra_rg'
    backendAzureRmStorageAccountName: 'infrastanstorageaccount'
    backendAzureRmContainerName: 'terraform'
    backendAzureRmKey: 'ado-develop-key'
- task: TerraformTaskV4@4
  displayName: Run Terraform Plan 
  inputs:
    provider: 'azurerm'
    command: 'plan'
    commandOptions: '-input=false -var "personal_access_token=$(personal_access_token)" -var "client_id=$(client_id)" -var "client_secret=$(client_secret)" -var "tenant_id=$(tenant_id)" -var "subscription_id=$(subscription_id)"'
    workingDirectory: '$(System.DefaultWorkingDirectory)/environments/dev' 
    environmentServiceNameAzureRM: 'Pay-As-You-Go (8b41bb3a-73a0-4041-90c2-d82d4d3cbc5f)'
- task: TerraformTaskV4@4
  displayName: Run Terraform Apply 
  inputs:
    provider: 'azurerm'
    command: 'apply'
    commandOptions: '-input=false -var "personal_access_token=$(personal_access_token)" -var "client_id=$(client_id)" -var "client_secret=$(client_secret)" -var "tenant_id=$(tenant_id)" -var "subscription_id=$(subscription_id)"'
    workingDirectory: '$(System.DefaultWorkingDirectory)/environments/dev' 
    environmentServiceNameAzureRM: 'Pay-As-You-Go (8b41bb3a-73a0-4041-90c2-d82d4d3cbc5f)'
